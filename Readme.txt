Andl is A New Database Language. See http://andl.org.

Andl.NET is a pure implementation of the Relational Algebra for manipulating
relational data in any .NET language. While Andl itself is a full programming 
language, Andl.NET relies on another language such as C# and simply provides 
the higher order queries.

Andl.NET can perform relational queries at or beyond the capabilities 
of any SQL dialect. It can do all the ordinary things like select, where 
and join but it can also do generative queries, self-joins, complex 
aggregations, subtotals and running totals (a bit like SQL recursive 
common table expressions and windowing). 

Andl.NET has its own in-memory database so it can provide a complete 
application backend for any kind of user interface on any platform. It can 
easily be used to program a data model as a set of tables just like SQL, but 
including all the access routines, without the need for an Object Relational 
Mapper.

Andl.NET can retrieve data from Csv, Txt, Sql, Odbc and Oledb but does not
provide any persistence mechanism. (Left as an exercise for the caller!)

The core feature of Andl.NET is an implementation of the generic interface 
IRelatable<T>. This provides a series of extension methods similar in flavour
to Linq's IEnumerable<T> and IQueryable<T>, but directly implementing the core
features of the Relational Algebra. 

The main differences from SQL are:
 * all joins are natural (by attribute name)
 * relations (tables) have no duplicate tuples (rows)
 * data values cannot be null.

The main differences from Linq are:
 * provides sources, stores and updates as well as queries
 * many additional relational operations

Sample programs are included to demonstrate these capabilities. Familiarity 
with Linq will help in reading them.

A future release of Andl.NET will generate SQL so that queries can be
executed on a relational database backend.

FIRST DO THIS
=============

Download the binary release and unzip it somewhere.

Go to the Sample folder in a command prompt and run the samples.
    C>AndlN.Samples.exe


FUNCTIONS SUPPORTED
===================

ALl the functions can be found in Relatable.cs. They are as follows.

FromEnumerable      Create a Relatable from an array, list or other enumerable
Sequence            Create a Relatable from a sequence of integers
FromCsv             Create a Relatable from a CSV file
FromText            Create a Relatable from a TXT file
FromSql             Create a Relatable from a Sql table
FromOdbc            Create a Relatable from an Odbc table
FromOledb           Create a Relatable from an Oledb table
AsEnumerable        Convert a Relatable to an IEnumerable
ToArray             Convert a Relatable to an array
ToList              Convert a Relatable to a list
ToStore             Convert a Relatable to a relation store

Count               Return the cardinality of a Relatable
IsEmpty             Return true if the Relatable is empty
Exists              Return true if the Relatable is not empty
All                 Return true if a predicate is satisfied for every tupe
Any                 Return true if a predicate is satisfied for any tuple
Contains            Return true if the Relatable contains a specified tuple
IsEqual             Return true if one Relatable is equal to another
IsSubset            Return true if one Relatable is a subset of the other
IsSuperset          Return true if one Relatable is a superset of the other
IsDisjoint          Return true if one Relatable is disjoint from the other

Where               Return tuples that satisfy a predicate
OrderBy             Return tuples ordered by a function
Group               Return tuples grouped by a function, with aggregation
While               Return tuples generated by an iterative function

Union               Return the set union of two Relatables
Minus               Return the set minus of two Relatables
Intersect           Return the set intersection of two Relatables
Difference          Return the set difference of two Relatables

Join                Return the natural join of two Relatables as new tuples
Join                Return right side tuples only from the natural join
Semijoin            Return left side matches from the natural join
Antijoin            Return left side non-matches from the natural join

Insert              Insert tuples into a store
Delete              Delete tuples from a store
Delete              Delete tuples from a store by predicate
Update              Update tuples in a store by predicate and new value


BUILDING ANDL
=============

The source code can be downloaded from https://github.com/davidandl/AndlNet.

The project should build 'out of the box' in Visual Studio 2015 with the .NET 
Framework 4.5, and possibly earlier versions. It builds an executable program 
that runs the samples, a class file generator, class library and unit tests.


LICENCE
=======

The source code files contain the following notice.

/// Andl is A New Data Language. See andl.org.
///
/// Copyright © David M. Bennett 2015-16 as an unpublished work. All rights reserved.
///
/// This software is provided in the hope that it will be useful, but with 
/// absolutely no warranties. You assume all responsibility for its use.
/// 
/// This software is completely free to use for purposes of personal study. 
/// For distribution, modification, commercial use or other purposes you must 
/// comply with the terms of the licence originally supplied with it in 
/// the file Licence.txt or at http://andl.org/Licence.txt.
///

So this version of Andl is free for any kind of experimental use, especially
helping to make it better. For now, the licence does impose some conditions on
distribution or commercial use, so read the licence if you need to. I expect 
that to change, but it will depend on feedback from those who want to use it.

Please contact me with any questions or suggestions at david@andl.org.
