// <rootname>
// Tuple type class file generated by Andl -- do not edit

using System;
namespace AndlN {
  public class Northwind {
    public const string Connection = @"Data Source=localhost;Initial Catalog=Northwind;Integrated Security=True";
    public const string CustomerDemographicsName = "CustomerDemographics";
    public const string CustomerDemographicsHeading = "CustomerTypeID:Text";
    public class CustomerDemographicsTuple {
      public string CustomerTypeID;
    }
    public static IRelatable<CustomerDemographicsTuple> CustomerDemographicsRelation() {
      return Relatable.FromSql<CustomerDemographicsTuple>(Connection, CustomerDemographicsName, CustomerDemographicsHeading);
    }

    public const string RegionName = "Region";
    public const string RegionHeading = "RegionID:Integer,RegionDescription:Text";
    public class RegionTuple {
      public int RegionID;
      public string RegionDescription;
    }
    public static IRelatable<RegionTuple> RegionRelation() {
      return Relatable.FromSql<RegionTuple>(Connection, RegionName, RegionHeading);
    }

    public const string EmployeesName = "Employees";
    public const string EmployeesHeading = "EmployeeID:Integer,LastName:Text,FirstName:Text,Title:Text,TitleOfCourtesy:Text,BirthDate:Time,HireDate:Time,Address:Text,City:Text,Region:Text,PostalCode:Text,Country:Text,HomePhone:Text,Extension:Text,ReportsTo:Integer,PhotoPath:Text";
    public class EmployeesTuple {
      public int EmployeeID;
      public string LastName;
      public string FirstName;
      public string Title;
      public string TitleOfCourtesy;
      public DateTime BirthDate;
      public DateTime HireDate;
      public string Address;
      public string City;
      public string Region;
      public string PostalCode;
      public string Country;
      public string HomePhone;
      public string Extension;
      public int ReportsTo;
      public string PhotoPath;
    }
    public static IRelatable<EmployeesTuple> EmployeesRelation() {
      return Relatable.FromSql<EmployeesTuple>(Connection, EmployeesName, EmployeesHeading);
    }

    public const string CategoriesName = "Categories";
    public const string CategoriesHeading = "CategoryID:Integer,CategoryName:Text";
    public class CategoriesTuple {
      public int CategoryID;
      public string CategoryName;
    }
    public static IRelatable<CategoriesTuple> CategoriesRelation() {
      return Relatable.FromSql<CategoriesTuple>(Connection, CategoriesName, CategoriesHeading);
    }

    public const string CustomersName = "Customers";
    public const string CustomersHeading = "CustomerID:Text,CompanyName:Text,ContactName:Text,ContactTitle:Text,Address:Text,City:Text,Region:Text,PostalCode:Text,Country:Text,Phone:Text,Fax:Text";
    public class CustomersTuple {
      public string CustomerID;
      public string CompanyName;
      public string ContactName;
      public string ContactTitle;
      public string Address;
      public string City;
      public string Region;
      public string PostalCode;
      public string Country;
      public string Phone;
      public string Fax;
    }
    public static IRelatable<CustomersTuple> CustomersRelation() {
      return Relatable.FromSql<CustomersTuple>(Connection, CustomersName, CustomersHeading);
    }

    public const string ShippersName = "Shippers";
    public const string ShippersHeading = "ShipperID:Integer,CompanyName:Text,Phone:Text";
    public class ShippersTuple {
      public int ShipperID;
      public string CompanyName;
      public string Phone;
    }
    public static IRelatable<ShippersTuple> ShippersRelation() {
      return Relatable.FromSql<ShippersTuple>(Connection, ShippersName, ShippersHeading);
    }

    public const string SuppliersName = "Suppliers";
    public const string SuppliersHeading = "SupplierID:Integer,CompanyName:Text,ContactName:Text,ContactTitle:Text,Address:Text,City:Text,Region:Text,PostalCode:Text,Country:Text,Phone:Text,Fax:Text";
    public class SuppliersTuple {
      public int SupplierID;
      public string CompanyName;
      public string ContactName;
      public string ContactTitle;
      public string Address;
      public string City;
      public string Region;
      public string PostalCode;
      public string Country;
      public string Phone;
      public string Fax;
    }
    public static IRelatable<SuppliersTuple> SuppliersRelation() {
      return Relatable.FromSql<SuppliersTuple>(Connection, SuppliersName, SuppliersHeading);
    }

    public const string OrdersName = "Orders";
    public const string OrdersHeading = "OrderID:Integer,CustomerID:Text,EmployeeID:Integer,OrderDate:Time,RequiredDate:Time,ShippedDate:Time,ShipVia:Integer,Freight:Number,ShipName:Text,ShipAddress:Text,ShipCity:Text,ShipRegion:Text,ShipPostalCode:Text,ShipCountry:Text";
    public class OrdersTuple {
      public int OrderID;
      public string CustomerID;
      public int EmployeeID;
      public DateTime OrderDate;
      public DateTime RequiredDate;
      public DateTime ShippedDate;
      public int ShipVia;
      public decimal Freight;
      public string ShipName;
      public string ShipAddress;
      public string ShipCity;
      public string ShipRegion;
      public string ShipPostalCode;
      public string ShipCountry;
    }
    public static IRelatable<OrdersTuple> OrdersRelation() {
      return Relatable.FromSql<OrdersTuple>(Connection, OrdersName, OrdersHeading);
    }

    public const string ProductsName = "Products";
    public const string ProductsHeading = "ProductID:Integer,ProductName:Text,SupplierID:Integer,CategoryID:Integer,QuantityPerUnit:Text,UnitPrice:Number,UnitsInStock:Integer,UnitsOnOrder:Integer,ReorderLevel:Integer,Discontinued:Bool";
    public class ProductsTuple {
      public int ProductID;
      public string ProductName;
      public int SupplierID;
      public int CategoryID;
      public string QuantityPerUnit;
      public decimal UnitPrice;
      public int UnitsInStock;
      public int UnitsOnOrder;
      public int ReorderLevel;
      public bool Discontinued;
    }
    public static IRelatable<ProductsTuple> ProductsRelation() {
      return Relatable.FromSql<ProductsTuple>(Connection, ProductsName, ProductsHeading);
    }

    public const string Order_DetailsName = "Order Details";
    public const string Order_DetailsHeading = "OrderID:Integer,ProductID:Integer,UnitPrice:Number,Quantity:Integer";
    public class Order_DetailsTuple {
      public int OrderID;
      public int ProductID;
      public decimal UnitPrice;
      public int Quantity;
    }
    public static IRelatable<Order_DetailsTuple> Order_DetailsRelation() {
      return Relatable.FromSql<Order_DetailsTuple>(Connection, Order_DetailsName, Order_DetailsHeading);
    }

    public const string CustomerCustomerDemoName = "CustomerCustomerDemo";
    public const string CustomerCustomerDemoHeading = "CustomerID:Text,CustomerTypeID:Text";
    public class CustomerCustomerDemoTuple {
      public string CustomerID;
      public string CustomerTypeID;
    }
    public static IRelatable<CustomerCustomerDemoTuple> CustomerCustomerDemoRelation() {
      return Relatable.FromSql<CustomerCustomerDemoTuple>(Connection, CustomerCustomerDemoName, CustomerCustomerDemoHeading);
    }

    public const string TerritoriesName = "Territories";
    public const string TerritoriesHeading = "TerritoryID:Text,TerritoryDescription:Text,RegionID:Integer";
    public class TerritoriesTuple {
      public string TerritoryID;
      public string TerritoryDescription;
      public int RegionID;
    }
    public static IRelatable<TerritoriesTuple> TerritoriesRelation() {
      return Relatable.FromSql<TerritoriesTuple>(Connection, TerritoriesName, TerritoriesHeading);
    }

    public const string EmployeeTerritoriesName = "EmployeeTerritories";
    public const string EmployeeTerritoriesHeading = "EmployeeID:Integer,TerritoryID:Text";
    public class EmployeeTerritoriesTuple {
      public int EmployeeID;
      public string TerritoryID;
    }
    public static IRelatable<EmployeeTerritoriesTuple> EmployeeTerritoriesRelation() {
      return Relatable.FromSql<EmployeeTerritoriesTuple>(Connection, EmployeeTerritoriesName, EmployeeTerritoriesHeading);
    }

    public const string Orders_QryName = "Orders Qry";
    public const string Orders_QryHeading = "OrderID:Integer,CustomerID:Text,EmployeeID:Integer,OrderDate:Time,RequiredDate:Time,ShippedDate:Time,ShipVia:Integer,Freight:Number,ShipName:Text,ShipAddress:Text,ShipCity:Text,ShipRegion:Text,ShipPostalCode:Text,ShipCountry:Text,CompanyName:Text,Address:Text,City:Text,Region:Text,PostalCode:Text,Country:Text";
    public class Orders_QryTuple {
      public int OrderID;
      public string CustomerID;
      public int EmployeeID;
      public DateTime OrderDate;
      public DateTime RequiredDate;
      public DateTime ShippedDate;
      public int ShipVia;
      public decimal Freight;
      public string ShipName;
      public string ShipAddress;
      public string ShipCity;
      public string ShipRegion;
      public string ShipPostalCode;
      public string ShipCountry;
      public string CompanyName;
      public string Address;
      public string City;
      public string Region;
      public string PostalCode;
      public string Country;
    }
    public static IRelatable<Orders_QryTuple> Orders_QryRelation() {
      return Relatable.FromSql<Orders_QryTuple>(Connection, Orders_QryName, Orders_QryHeading);
    }

    public const string Quarterly_OrdersName = "Quarterly Orders";
    public const string Quarterly_OrdersHeading = "CustomerID:Text,CompanyName:Text,City:Text,Country:Text";
    public class Quarterly_OrdersTuple {
      public string CustomerID;
      public string CompanyName;
      public string City;
      public string Country;
    }
    public static IRelatable<Quarterly_OrdersTuple> Quarterly_OrdersRelation() {
      return Relatable.FromSql<Quarterly_OrdersTuple>(Connection, Quarterly_OrdersName, Quarterly_OrdersHeading);
    }

    public const string InvoicesName = "Invoices";
    public const string InvoicesHeading = "ShipName:Text,ShipAddress:Text,ShipCity:Text,ShipRegion:Text,ShipPostalCode:Text,ShipCountry:Text,CustomerID:Text,CustomerName:Text,Address:Text,City:Text,Region:Text,PostalCode:Text,Country:Text,Salesperson:Text,OrderID:Integer,OrderDate:Time,RequiredDate:Time,ShippedDate:Time,ShipperName:Text,ProductID:Integer,ProductName:Text,UnitPrice:Number,Quantity:Integer,ExtendedPrice:Number,Freight:Number";
    public class InvoicesTuple {
      public string ShipName;
      public string ShipAddress;
      public string ShipCity;
      public string ShipRegion;
      public string ShipPostalCode;
      public string ShipCountry;
      public string CustomerID;
      public string CustomerName;
      public string Address;
      public string City;
      public string Region;
      public string PostalCode;
      public string Country;
      public string Salesperson;
      public int OrderID;
      public DateTime OrderDate;
      public DateTime RequiredDate;
      public DateTime ShippedDate;
      public string ShipperName;
      public int ProductID;
      public string ProductName;
      public decimal UnitPrice;
      public int Quantity;
      public decimal ExtendedPrice;
      public decimal Freight;
    }
    public static IRelatable<InvoicesTuple> InvoicesRelation() {
      return Relatable.FromSql<InvoicesTuple>(Connection, InvoicesName, InvoicesHeading);
    }

    public const string Product_Sales_for_1997Name = "Product Sales for 1997";
    public const string Product_Sales_for_1997Heading = "CategoryName:Text,ProductName:Text,ProductSales:Number";
    public class Product_Sales_for_1997Tuple {
      public string CategoryName;
      public string ProductName;
      public decimal ProductSales;
    }
    public static IRelatable<Product_Sales_for_1997Tuple> Product_Sales_for_1997Relation() {
      return Relatable.FromSql<Product_Sales_for_1997Tuple>(Connection, Product_Sales_for_1997Name, Product_Sales_for_1997Heading);
    }

    public const string Current_Product_ListName = "Current Product List";
    public const string Current_Product_ListHeading = "ProductID:Integer,ProductName:Text";
    public class Current_Product_ListTuple {
      public int ProductID;
      public string ProductName;
    }
    public static IRelatable<Current_Product_ListTuple> Current_Product_ListRelation() {
      return Relatable.FromSql<Current_Product_ListTuple>(Connection, Current_Product_ListName, Current_Product_ListHeading);
    }

    public const string Order_Details_ExtendedName = "Order Details Extended";
    public const string Order_Details_ExtendedHeading = "OrderID:Integer,ProductID:Integer,ProductName:Text,UnitPrice:Number,Quantity:Integer,ExtendedPrice:Number";
    public class Order_Details_ExtendedTuple {
      public int OrderID;
      public int ProductID;
      public string ProductName;
      public decimal UnitPrice;
      public int Quantity;
      public decimal ExtendedPrice;
    }
    public static IRelatable<Order_Details_ExtendedTuple> Order_Details_ExtendedRelation() {
      return Relatable.FromSql<Order_Details_ExtendedTuple>(Connection, Order_Details_ExtendedName, Order_Details_ExtendedHeading);
    }

    public const string Products_Above_Average_PriceName = "Products Above Average Price";
    public const string Products_Above_Average_PriceHeading = "ProductName:Text,UnitPrice:Number";
    public class Products_Above_Average_PriceTuple {
      public string ProductName;
      public decimal UnitPrice;
    }
    public static IRelatable<Products_Above_Average_PriceTuple> Products_Above_Average_PriceRelation() {
      return Relatable.FromSql<Products_Above_Average_PriceTuple>(Connection, Products_Above_Average_PriceName, Products_Above_Average_PriceHeading);
    }

    public const string Products_by_CategoryName = "Products by Category";
    public const string Products_by_CategoryHeading = "CategoryName:Text,ProductName:Text,QuantityPerUnit:Text,UnitsInStock:Integer,Discontinued:Bool";
    public class Products_by_CategoryTuple {
      public string CategoryName;
      public string ProductName;
      public string QuantityPerUnit;
      public int UnitsInStock;
      public bool Discontinued;
    }
    public static IRelatable<Products_by_CategoryTuple> Products_by_CategoryRelation() {
      return Relatable.FromSql<Products_by_CategoryTuple>(Connection, Products_by_CategoryName, Products_by_CategoryHeading);
    }

    public const string Alphabetical_list_of_productsName = "Alphabetical list of products";
    public const string Alphabetical_list_of_productsHeading = "ProductID:Integer,ProductName:Text,SupplierID:Integer,CategoryID:Integer,QuantityPerUnit:Text,UnitPrice:Number,UnitsInStock:Integer,UnitsOnOrder:Integer,ReorderLevel:Integer,Discontinued:Bool,CategoryName:Text";
    public class Alphabetical_list_of_productsTuple {
      public int ProductID;
      public string ProductName;
      public int SupplierID;
      public int CategoryID;
      public string QuantityPerUnit;
      public decimal UnitPrice;
      public int UnitsInStock;
      public int UnitsOnOrder;
      public int ReorderLevel;
      public bool Discontinued;
      public string CategoryName;
    }
    public static IRelatable<Alphabetical_list_of_productsTuple> Alphabetical_list_of_productsRelation() {
      return Relatable.FromSql<Alphabetical_list_of_productsTuple>(Connection, Alphabetical_list_of_productsName, Alphabetical_list_of_productsHeading);
    }

    public const string Order_SubtotalsName = "Order Subtotals";
    public const string Order_SubtotalsHeading = "OrderID:Integer,Subtotal:Number";
    public class Order_SubtotalsTuple {
      public int OrderID;
      public decimal Subtotal;
    }
    public static IRelatable<Order_SubtotalsTuple> Order_SubtotalsRelation() {
      return Relatable.FromSql<Order_SubtotalsTuple>(Connection, Order_SubtotalsName, Order_SubtotalsHeading);
    }

    public const string Customer_and_Suppliers_by_CityName = "Customer and Suppliers by City";
    public const string Customer_and_Suppliers_by_CityHeading = "City:Text,CompanyName:Text,ContactName:Text,Relationship:Text";
    public class Customer_and_Suppliers_by_CityTuple {
      public string City;
      public string CompanyName;
      public string ContactName;
      public string Relationship;
    }
    public static IRelatable<Customer_and_Suppliers_by_CityTuple> Customer_and_Suppliers_by_CityRelation() {
      return Relatable.FromSql<Customer_and_Suppliers_by_CityTuple>(Connection, Customer_and_Suppliers_by_CityName, Customer_and_Suppliers_by_CityHeading);
    }

    public const string Sales_Totals_by_AmountName = "Sales Totals by Amount";
    public const string Sales_Totals_by_AmountHeading = "SaleAmount:Number,OrderID:Integer,CompanyName:Text,ShippedDate:Time";
    public class Sales_Totals_by_AmountTuple {
      public decimal SaleAmount;
      public int OrderID;
      public string CompanyName;
      public DateTime ShippedDate;
    }
    public static IRelatable<Sales_Totals_by_AmountTuple> Sales_Totals_by_AmountRelation() {
      return Relatable.FromSql<Sales_Totals_by_AmountTuple>(Connection, Sales_Totals_by_AmountName, Sales_Totals_by_AmountHeading);
    }

    public const string Sales_by_CategoryName = "Sales by Category";
    public const string Sales_by_CategoryHeading = "CategoryID:Integer,CategoryName:Text,ProductName:Text,ProductSales:Number";
    public class Sales_by_CategoryTuple {
      public int CategoryID;
      public string CategoryName;
      public string ProductName;
      public decimal ProductSales;
    }
    public static IRelatable<Sales_by_CategoryTuple> Sales_by_CategoryRelation() {
      return Relatable.FromSql<Sales_by_CategoryTuple>(Connection, Sales_by_CategoryName, Sales_by_CategoryHeading);
    }

    public const string Summary_of_Sales_by_QuarterName = "Summary of Sales by Quarter";
    public const string Summary_of_Sales_by_QuarterHeading = "ShippedDate:Time,OrderID:Integer,Subtotal:Number";
    public class Summary_of_Sales_by_QuarterTuple {
      public DateTime ShippedDate;
      public int OrderID;
      public decimal Subtotal;
    }
    public static IRelatable<Summary_of_Sales_by_QuarterTuple> Summary_of_Sales_by_QuarterRelation() {
      return Relatable.FromSql<Summary_of_Sales_by_QuarterTuple>(Connection, Summary_of_Sales_by_QuarterName, Summary_of_Sales_by_QuarterHeading);
    }

    public const string Summary_of_Sales_by_YearName = "Summary of Sales by Year";
    public const string Summary_of_Sales_by_YearHeading = "ShippedDate:Time,OrderID:Integer,Subtotal:Number";
    public class Summary_of_Sales_by_YearTuple {
      public DateTime ShippedDate;
      public int OrderID;
      public decimal Subtotal;
    }
    public static IRelatable<Summary_of_Sales_by_YearTuple> Summary_of_Sales_by_YearRelation() {
      return Relatable.FromSql<Summary_of_Sales_by_YearTuple>(Connection, Summary_of_Sales_by_YearName, Summary_of_Sales_by_YearHeading);
    }

    public const string Category_Sales_for_1997Name = "Category Sales for 1997";
    public const string Category_Sales_for_1997Heading = "CategoryName:Text,CategorySales:Number";
    public class Category_Sales_for_1997Tuple {
      public string CategoryName;
      public decimal CategorySales;
    }
    public static IRelatable<Category_Sales_for_1997Tuple> Category_Sales_for_1997Relation() {
      return Relatable.FromSql<Category_Sales_for_1997Tuple>(Connection, Category_Sales_for_1997Name, Category_Sales_for_1997Heading);
    }

  }
}
